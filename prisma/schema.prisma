datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  roles    UserToRole[]
}

model UserToRole {
  id     Int  @id @default(autoincrement())
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  @@unique([roleId, userId])
}

model Role {
  id    Int          @id @default(autoincrement())
  name  String       @unique
  users UserToRole[]
}

model Password {
  hash String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

model Customer {
  id    Int    @id @default(autoincrement())
  email String
  name  String
  phone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mulchOrders MulchOrder[]
}

model MulchOrder {
  id                   String    @id @default(cuid())
  quantity            Int
  pricePerUnit        Float
  color               String // enum - one of 'BLACK' or 'BROWN'
  orderType           String // enum - one of 'SPREAD' or 'DELIVERY'
  note                String?
  neighborhood        String
  streetAddress       String
  status              String    @default("PENDING") // enum - one of 'PENDING', 'PAID', 'FULFILLED', 'CANCELLED'
  paypalOrderId       String?
  paypalPaymentSource String?
  paypalPayerId       String?
  referralSource      String?
  referralSourceDetails String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  customer            Customer  @relation(fields: [customerId], references: [id])
  customerId          Int
}
